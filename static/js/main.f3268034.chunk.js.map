{"version":3,"sources":["features/counter/Counter.module.css","logo.svg","features/counter/counterAPI.js","features/counter/counterSlice.js","features/timer/timerSlice.js","features/timer/timerAPI.js","features/timer/Timer.js","features/Quotes/Quotes.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["module","exports","fetchCount","amount","Promise","resolve","setTimeout","data","incrementAsync","createAsyncThunk","a","response","counterSlice","createSlice","name","initialState","value","status","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","timerSlice","timeOffset","setOffset","Timer","useDispatch","useState","offset","setState","useEffect","setInterval","Math","random","date","Date","setMinutes","getMinutes","setSeconds","getSeconds","setMonth","getMonth","setFullYear","getFullYear","class","toLocaleTimeString","toLocaleDateString","weekday","year","month","day","getDateString","Quotes","quotes","setQuote","max","length","floor","quote","App","store","configureStore","reducer","counter","counterReducer","timer","timerReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f3268034.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Counter_row__2oMIN\",\"value\":\"Counter_value__1gAD_\",\"button\":\"Counter_button__3bJ69\",\"textbox\":\"Counter_textbox__74dWn\",\"asyncButton\":\"Counter_asyncButton__3piZs Counter_button__3bJ69\"};","export default __webpack_public_path__ + \"static/media/logo.b2e5a01e.svg\";","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\n\nconst initialState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { fetchTime } from './timerAPI';\r\n\r\nconst initialState = {\r\n  timeOffset: 0 \r\n};\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched. Thunks are\r\n// typically used to make async requests.\r\nexport const getTimeAsync = createAsyncThunk(\r\n  'timer/fetchTime',\r\n  async () => {\r\n    const response = await fetchTime();\r\n    // The value we return becomes the `fulfilled` action payload\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const timerSlice = createSlice({\r\n  name: 'timer',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    setOffset: (state, action) => {\r\n\r\n      state.timeOffset = action.payload.timeOffset;\r\n    },\r\n  }\r\n});\r\n\r\nexport const { setOffset} = timerSlice.actions;\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectOffset = (state) => state.timer.timeOffset;\r\nexport const selectTime = (state)=> {\r\n\r\n  return new Date(new Date().getTime() + 1);\r\n}\r\nexport default timerSlice.reducer;\r\n","export function fetchTime() {\r\n  return new Promise((resolve) =>\r\n    setTimeout(() => resolve( ), 500)\r\n  );\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { selectOffset, getTimeAsync, selectTime, setOffset } from './timerSlice';\r\nimport ReactDOM from 'react-dom';\r\nexport function Timer(){\r\n\r\n    const dispatch = useDispatch();\r\n    const [offset, setOffset] = useState(0);\r\n    \r\n\r\n    const [state, setState] = useState(0);\r\n\r\n    useEffect(()=>{\r\n        setInterval(()=>setState(1+state), 500);\r\n        \r\n        \r\n    });\r\n    useEffect(()=>{\r\n        if (Math.random() > 0.5){\r\n            setOffset(0);\r\n        }\r\n        else{\r\n            setOffset(Math.random() * 9999999 - Math.random() * 9999999);\r\n        }\r\n        \r\n    }, []);\r\n    \r\n\r\n\r\n    function getDateString(){\r\n\r\n        \r\n\r\n        let date  = new Date();\r\n        date.setMinutes(date.getMinutes() + offset % 60);\r\n        date.setSeconds(date.getSeconds() + (offset * 1.2) % 60);\r\n        date.setMonth(date.getMonth() + (offset * 5.6) % 12);\r\n        date.setFullYear(date.getFullYear() + (offset * 5.6) % 100);\r\n        var options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };\r\n\r\n        return (\r\n            <div class = \"container\">\r\n                <div class= \"row mt-4\"/>\r\n                <div class= \"row mt-4\"/>\r\n                <div class= \"row mt-4\"/>\r\n                <div class = \"row text-center w-100 display-1\">\r\n                    {date.toLocaleTimeString()} \r\n                </div>\r\n                  <div class = \"row text-center w-100 display-6\">\r\n                    {date.toLocaleDateString(\"en-US\", options)}\r\n                </div>\r\n                <div class= \"row mt-4\"/>\r\n            </div>\r\n        )\r\n    }\r\n    \r\n\r\n    return getDateString();\r\n}","import { useEffect, useState } from \"react\";\r\n\r\nexport function Quotes() {\r\n   \r\n\r\n\r\n    const quotes = [\r\n        \"Even a broken clock is right twice a day. Except this one.\",\r\n        \"“Listen to God with a broken heart. He is not only the doctor who mends it, but also the father who wipes away the tears.”― Criss Jami\",\r\n        \"“i felt her absence. it was like waking up one day with no teeth in your mouth. you wouldn't need to run to the mirror to know they were gone”― James Dashner, The Scorch Trials\",\r\n        \"“To be rejected by someone doesn't mean you should also reject yourself or that you should think of yourself as a lesser person. It doesn't mean that nobody will ever love you anymore. Remember that only ONE person has rejected you at the moment, and it only hurt so much because to you, that person's opinion symbolized the opinion of the whole world, of God.”― Jocelyn Soriano, Mend My Broken Heart\",\r\n        \"“The best way to not get your heart broken, is pretending you don't have one.”― Charlie Sheen\",\r\n        \"“Yes, I understand why things had to happen this way. I understand his reason for causing me pain. But mere understanding does not chase away the hurt. It does not call upon the sun when dark clouds have loomed over me. Let the rain come then if it must come! And let it wash away the dust that hurt my eyes!”― Jocelyn Soriano, Mend My Broken Heart\",\r\n        \"“We should love, not fall in love, because everything that falls, gets broken.”― Taylor Swift, Taylor Swift\",\r\n        \"“He'd broken his leg dropping down from the rooftop. The bone didn't set right, and he'd limped ever after. So he'd found himself a Fabrikator and had his cane made. It became a declaration. There was no part of him that was no broken, that had not healed wrong, and there was no part of him that was not stronger for having been broken.” ― Leigh Bardugo, Six of Crows\",\r\n        \"“We die a little every day and by degrees we’re reborn into different men, older men in the same clothes, with the same scars.” ― Mark Lawrence, King of Thorns\",\r\n        \"“I scream for everything that has gone wrong. I scream for everything broken in our lives.” ― Marie Lu, Champion\",\r\n        \"“So I am not a broken heart. \\n\" +\r\n        \"I am not the weight I lost or miles or ran and I am not the way I slept on my doorstep under the bare sky in smell of tears and whiskey because my apartment was empty and if I were to be this empty I wanted something solid to sleep on. Like concrete.\\n\" +\r\n        \"I am not this year and I am not your fault.\\n\" +\r\n        \"I am muscles building cells, a little every day, because they broke that day,\\n\" +\r\n        \"but bones are stronger once they heal and I am smiling to the bus driver and replacing my groceries once a week and I am not sitting for hours in the shower anymore.\\n\" +\r\n        \"I am the way a life unfolds and bloom and seasons come and go and I am the way the spring always finds a way to turn even the coldest winter into a field of green and flowers and new life.\\n\" +\r\n        \"I am not your fault.” ― Charlotte Eriksson, You're Doing Just Fine\",\r\n        \"“But hurry, let's entwine ourselves as one, our mouth broken, our soul bitten by love, so time discovers us safely destroyed.” ― Federico Garcia Lorca\",\r\n        \"“You are damaged and broken and unhinged. But so are shooting stars and comets.” ― Nikita Gill\",\r\n        \"“There is no perfection, only beautiful versions of brokenness.” ― Shannon L. Alder\",\r\n        \"“I once had a dreams of becoming a beautiful poet, but upon an unfortunate series of events some of those dreams dashed and divided like a million stars in the night sky that I wished on over and over again, sparkling and broken. But I didn't really mind, because I knew that it takes getting everything you ever wanted, and then losing it to know what true freedom is.” ― Lana Del Rey\",\r\n        \"“A fine glass vase goes from treasure to trash, the moment it is broken. Fortunately, something else happens to you and me. Pick up your pieces. Then, help me gather mine.” ― Vera Nazarian, The Perpetual Calendar of Inspiration\",\r\n        \"“Who fixes broken people? Is it only other broken people, ones who've already been ruined? And do we need to be fixed? It was the messiness and hurt in our pasts that drove us, and that same hurt connected us at a subdermal level, the kind of scars written so deeply in your cells that you can't even see them anymore, only recognize them in someone else.” ― Leah Raeder, Unteachable\",\r\n    ];\r\n    useEffect(()=>setQuote(quotes[getRandomInt(quotes.length)]), []);\r\n\r\n\r\n    const [quote, setQuote] = useState('\"a clock that is sometimes broken.\"')\r\n    \r\n    function getRandomInt(max) {\r\n        return Math.floor(Math.random() * max);\r\n    }\r\n    return(\r\n        <>\r\n            {quote}\r\n        </>\r\n    )\r\n\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport { Counter } from './features/counter/Counter';\nimport { Timer } from './features/timer/Timer';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Quotes } from './features/Quotes/Quotes';\n\nfunction App() {\n  return (\n    <div class = \"container\">\n     \n      <div class = \"row\">\n        <Timer/>\n      </div>\n       <div class = \"row display-6\">\n        We're All Broken Clocks\n      </div>\n      <div class = \"row\">\n        <Quotes/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\nimport timerReducer from '../features/timer/timerSlice'\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    timer : timerReducer\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}